// Generated by CoffeeScript 1.7.1
(function() {
  var canvas, canvas_height, canvas_width, ctx, draw_scenery, draw_square, frame, grid, grid_left, grid_top, keys_down, mouse_left, mouse_middle, mouse_right, mouse_x, mouse_y, new_puzzle, square_height, square_width, squares_high, squares_wide;

  canvas = null;

  ctx = null;

  frame = 0;

  canvas_width = 640;

  canvas_height = 480;

  keys_down = {};

  mouse_x = 0;

  mouse_y = 0;

  mouse_left = false;

  mouse_middle = false;

  mouse_right = false;

  grid = [];

  square_width = 72;

  square_height = 72;

  grid_top = 15;

  grid_left = 15;

  squares_high = function() {
    return grid.length;
  };

  squares_wide = function() {
    if (grid.length === 0) {
      return 0;
    } else {
      return grid[0].length;
    }
  };

  new_puzzle = function(height, width) {
    var c, r, row, _i, _j, _ref, _ref1;
    grid = [];
    for (r = _i = 0, _ref = height - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; r = 0 <= _ref ? ++_i : --_i) {
      row = [];
      for (c = _j = 0, _ref1 = width - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; c = 0 <= _ref1 ? ++_j : --_j) {
        row.push(null);
      }
      grid.push(row);
    }
    return null;
  };

  draw_square = function(val, x, y) {
    var center_x, center_y;
    ctx.fillStyle = 'black';
    ctx.fillRect(x, y, square_width, square_height);
    switch (val) {
      case null:
        ctx.fillStyle = 'white';
        ctx.fillRect(x + 1, y + 1, square_width - 2, square_height - 2);
        break;
      case true:
        ctx.fillStyle = '#444';
        ctx.fillRect(x + 1, y + 1, square_width - 2, square_height - 2);
        break;
      case false:
        ctx.fillStyle = 'white';
        ctx.fillRect(x + 1, y + 1, square_width - 2, square_height - 2);
        center_x = x + square_width / 2;
        center_y = y + square_height / 2;
        ctx.fillStyle = 'black';
        ctx.fillRect(center_x - 4, center_y - 4, 8, 8);
        break;
      default:
        null;
    }
    return null;
  };

  draw_scenery = function() {
    var c, r, row, val, _i, _j, _len, _len1;
    ctx.fillStyle = 'gray';
    ctx.fillRect(0, 0, canvas_width, canvas_height);
    for (r = _i = 0, _len = grid.length; _i < _len; r = ++_i) {
      row = grid[r];
      for (c = _j = 0, _len1 = row.length; _j < _len1; c = ++_j) {
        val = row[c];
        draw_square(val, grid_left + c * square_width, grid_top + r * square_height);
      }
    }
    return null;
  };

  $(document).ready(function() {
    var animloop;
    canvas = $('#canvas')[0];
    ctx = canvas.getContext('2d');
    $(document).keydown(function(evt) {
      keys_down[evt.which] = true;
      return null;
    });
    $(document).keyup(function(evt) {
      delete keys_down[evt.which];
      return null;
    });
    $(document).mousemove(function(evt) {
      var rect;
      rect = canvas.getBoundingClientRect();
      mouse_x = evt.clientX - rect.left;
      mouse_y = evt.clientY - rect.top;
      return null;
    });
    $(document).mouseup(function(evt) {
      switch (evt.which) {
        case 1:
          mouse_left = false;
          break;
        case 2:
          mouse_middle = false;
          break;
        case 3:
          mouse_right = false;
      }
      return null;
    });
    $(document).mousedown(function(evt) {
      switch (evt.which) {
        case 1:
          mouse_left = true;
          break;
        case 2:
          mouse_middle = true;
          break;
        case 3:
          mouse_right = true;
      }
      return null;
    });
    window.requestAnimFrame = (function() {
      return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback) {
        return window.setTimeout(callback, 1000 / 60);
      };
    })();
    new_puzzle(5, 5);
    grid[2][2] = true;
    grid[3][3] = false;
    return (animloop = function() {
      var lines;
      requestAnimFrame(animloop);
      if ($('#running')[0].checked) {
        frame++;
        draw_scenery();
        lines = ["Frame " + frame, "Mouse " + mouse_left + ", " + mouse_middle + ", " + mouse_right + " at (" + mouse_x + ", " + mouse_y + ")", "Keys at " + (Object.keys(keys_down).toString())];
        $('#debug')[0].innerHTML = lines.join('<br />');
      }
      return null;
    })();
  });

}).call(this);
