// Generated by CoffeeScript 1.7.1
(function() {
  var canvas, canvas_height, canvas_width, click_square, ctx, draw_scenery, draw_square, find_pools, frames, grid, grid_left, grid_top, is_full, keys_down, minutes, mouse_left, mouse_right, mouse_square, mouse_x, mouse_y, new_puzzle, pools, seconds, square_height, square_width, squares_high, squares_wide;

  canvas = null;

  ctx = null;

  frames = 0;

  seconds = 0;

  minutes = 0;

  canvas_width = 640;

  canvas_height = 480;

  keys_down = {};

  mouse_x = 0;

  mouse_y = 0;

  mouse_left = false;

  mouse_right = false;

  grid = [];

  square_width = 72;

  square_height = 72;

  grid_top = 15;

  grid_left = 15;

  squares_high = function() {
    return grid.length;
  };

  squares_wide = function() {
    if (grid.length === 0) {
      return 0;
    } else {
      return grid[0].length;
    }
  };

  pools = {};

  new_puzzle = function(height, width) {
    var c, r, row, _i, _j, _ref, _ref1;
    grid = [];
    for (r = _i = 0, _ref = height - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; r = 0 <= _ref ? ++_i : --_i) {
      row = [];
      for (c = _j = 0, _ref1 = width - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; c = 0 <= _ref1 ? ++_j : --_j) {
        row.push(null);
      }
      grid.push(row);
    }
    return null;
  };

  is_full = function() {
    var row, val, _i, _j, _len, _len1;
    for (_i = 0, _len = grid.length; _i < _len; _i++) {
      row = grid[_i];
      for (_j = 0, _len1 = row.length; _j < _len1; _j++) {
        val = row[_j];
        if (val === null) {
          return false;
        }
      }
    }
    return true;
  };

  find_pools = function() {
    var c, cv, pool, r, rv, _i, _j, _k, _l, _len, _len1, _ref, _ref1, _ref2, _ref3;
    pools = {};
    for (r = _i = 0, _ref = squares_high() - 2; 0 <= _ref ? _i <= _ref : _i >= _ref; r = 0 <= _ref ? ++_i : --_i) {
      for (c = _j = 0, _ref1 = squares_wide() - 2; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; c = 0 <= _ref1 ? ++_j : --_j) {
        pool = true;
        _ref2 = [r, r + 1];
        for (_k = 0, _len = _ref2.length; _k < _len; _k++) {
          rv = _ref2[_k];
          _ref3 = [c, c + 1];
          for (_l = 0, _len1 = _ref3.length; _l < _len1; _l++) {
            cv = _ref3[_l];
            if (grid[rv][cv] !== true) {
              pool = false;
            }
          }
        }
        if (pool) {
          pools["" + r + "," + c] = true;
        }
      }
    }
    return null;
  };

  mouse_square = function() {
    var c, r;
    c = Math.floor((mouse_x - grid_left) / square_width);
    r = Math.floor((mouse_y - grid_top) / square_height);
    if (((0 <= r && r < squares_wide())) && ((0 <= c && c < squares_high()))) {
      return [r, c];
    } else {
      return null;
    }
  };

  click_square = function(r, c) {
    if (typeof grid[r][c] === 'number') {
      return;
    }
    if (mouse_left && mouse_right) {
      grid[r][c] = null;
    } else if (mouse_left) {
      grid[r][c] = true;
    } else if (mouse_right) {
      grid[r][c] = false;
    }
    find_pools();
    return null;
  };

  draw_square = function(val, x, y) {
    var center_x, center_y;
    ctx.fillStyle = 'black';
    ctx.fillRect(x, y, square_width, square_height);
    switch (val) {
      case null:
        ctx.fillStyle = 'white';
        ctx.fillRect(x + 1, y + 1, square_width - 2, square_height - 2);
        break;
      case true:
        ctx.fillStyle = '#444';
        ctx.fillRect(x + 1, y + 1, square_width - 2, square_height - 2);
        break;
      case false:
        ctx.fillStyle = 'white';
        ctx.fillRect(x + 1, y + 1, square_width - 2, square_height - 2);
        center_x = x + square_width / 2;
        center_y = y + square_height / 2;
        ctx.fillStyle = 'black';
        ctx.fillRect(center_x - 4, center_y - 4, 8, 8);
        break;
      default:
        ctx.fillStyle = 'white';
        ctx.fillRect(x + 1, y + 1, square_width - 2, square_height - 2);
        ctx.fillStyle = 'black';
        ctx.font = "" + (square_height * 2 / 3) + "px Serif";
        ctx.fillText(val, x + (square_width * 2 / 7), y + (square_height * 3 / 4));
    }
    return null;
  };

  draw_scenery = function() {
    var c, r, row, val, _i, _j, _len, _len1;
    ctx.fillStyle = 'gray';
    ctx.fillRect(0, 0, canvas_width, canvas_height);
    for (r = _i = 0, _len = grid.length; _i < _len; r = ++_i) {
      row = grid[r];
      for (c = _j = 0, _len1 = row.length; _j < _len1; c = ++_j) {
        val = row[c];
        draw_square(val, grid_left + c * square_width, grid_top + r * square_height);
      }
    }
    return null;
  };

  $(document).ready(function() {
    var animloop, pad2;
    canvas = $('#canvas')[0];
    ctx = canvas.getContext('2d');
    $(document).keydown(function(evt) {
      keys_down[evt.which] = true;
      return null;
    });
    $(document).keyup(function(evt) {
      delete keys_down[evt.which];
      return null;
    });
    $(document).mousemove(function(evt) {
      var c, r, rect, _ref;
      rect = canvas.getBoundingClientRect();
      mouse_x = evt.clientX - rect.left;
      mouse_y = evt.clientY - rect.top;
      if (_ref = mouse_square(), r = _ref[0], c = _ref[1], _ref) {
        click_square(r, c);
      }
      return null;
    });
    $(document).mouseup(function(evt) {
      mouse_left = mouse_right = false;
      return null;
    });
    $(document).mousedown(function(evt) {
      var c, r, _ref, _ref1;
      switch (evt.which) {
        case 1:
          mouse_left = true;
          if (_ref = mouse_square(), r = _ref[0], c = _ref[1], _ref) {
            click_square(r, c);
          }
          break;
        case 3:
          mouse_right = true;
          if (_ref1 = mouse_square(), r = _ref1[0], c = _ref1[1], _ref1) {
            click_square(r, c);
          }
      }
      return null;
    });
    window.requestAnimFrame = (function() {
      return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback) {
        return window.setTimeout(callback, 1000 / 60);
      };
    })();
    new_puzzle(5, 5);
    grid[1][2] = 4;
    grid[4][0] = 5;
    grid[4][2] = 2;
    grid[4][4] = 3;
    pad2 = function(s) {
      return ('00' + s).slice(-2);
    };
    return (animloop = function() {
      var lines, s, _ref;
      requestAnimFrame(animloop);
      if ($('#running')[0].checked) {
        frames++;
        if (frames === 60) {
          frames = 0;
          seconds++;
          if (seconds === 60) {
            seconds = 0;
            minutes++;
          }
        }
        draw_scenery();
        lines = [
          "Time: " + (pad2(minutes)) + ":" + (pad2(seconds)) + ";" + (pad2(frames)), "Mouse [" + mouse_left + ", " + mouse_right + "] at (" + mouse_x + ", " + mouse_y + ")", "Mouse square " + ((_ref = mouse_square()) != null ? _ref.toString() : void 0), "Keys pressed: [" + (Object.keys(keys_down).toString()) + "]", "Pools: [" + (((function() {
            var _i, _len, _ref1, _results;
            _ref1 = Object.keys(pools);
            _results = [];
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
              s = _ref1[_i];
              _results.push("(" + s + ")");
            }
            return _results;
          })()).toString()) + "]"
        ];
        $('#debug')[0].innerHTML = lines.join('<br />');
      }
      return null;
    })();
  });

}).call(this);
